server:
  port: 10005 # Money No 5

spring:

  application:
    name: money-app

  profiles:
    active: dev

  main:
    allow-circular-references: true # 允许循环引用
    allow-bean-definition-overriding: true # 允许覆盖bean定义
    lazy-initialization: false # 关闭懒加载, 防止组件失效

  # MySQL
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: ${infrastructure.datasource.driver-class-name}
    url: jdbc:mysql://${infrastructure.datasource.host}:${infrastructure.datasource.port}/${infrastructure.datasource.database}?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
    username: ${infrastructure.datasource.username}
    password: ${infrastructure.datasource.password}


    # druid
    druid:
      initial-size: 10
      min-idle: 5
      max-active: 50
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,log4j
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000


  # Redis
  data:
    redis:
      host: ${infrastructure.redis.host}
      port: ${infrastructure.redis.port}
      password: ${infrastructure.redis.password}
      database: ${infrastructure.redis.database}
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 1
          time-between-eviction-runs: 10s
      timeout: 10000

  # RabbitMQ
  rabbitmq:
    host: ${infrastructure.rabbitmq.host}
    username: ${infrastructure.rabbitmq.username}
    password: ${infrastructure.rabbitmq.password}
    virtual-host: ${infrastructure.rabbitmq.virtual-host}
    port: ${infrastructure.rabbitmq.port}

    listener:
      simple:
        concurrency: 10
        max-concurrency: 10
        prefetch: 1
        auto-startup: true
        default-requeue-rejected: true

    template:
      retry:
        enabled: true
        initial-interval: 1000ms
        max-attempts: 3
        max-interval: 10000ms
        multiplier: 1


  cloud:
    # Nacos
    nacos:
      # 服务发现
      discovery:
        server-addr: ${infrastructure.nacos.host}:${infrastructure.nacos.port}
        group: DEFAULT_GROUP

      # 配置中心
      config:
        server-addr: ${infrastructure.nacos.host}:${infrastructure.nacos.port}
        file-extension: yaml
        refresh-enabled: true
        group: DEFAULT_GROUP
        shared-configs:
          - data-id: server.general-${spring.profiles.active}.yaml # 服务通用配置
            group: DEFAULT_GROUP
            refresh: true

    # Sentinel
    sentinel:
      web-context-unify: false # 关闭context整合
      enabled: true # 是否开启。默认为 true 开启
      eager: true # 是否饥饿加载。默认为 false 关闭
      transport:
        port: 9995  # Money No 5
        dashboard: ${infrastructure.sentinel.host}:${infrastructure.sentinel.port} # Sentinel 控制台地址
        clientIp: 127.0.0.1
      datasource:
        flow:
          nacos:
            server-addr: ${infrastructure.nacos.host}:${infrastructure.nacos.port}
            dataId: ${spring.application.name}-flow-rules-${spring.profiles.active}.yaml
            groupId: DEFAULT_GROUP
            rule-type: flow
        degrade:
          nacos:
            server-addr: ${infrastructure.nacos.host}:${infrastructure.nacos.port}
            dataId: ${spring.application.name}-degrade-rules-${spring.profiles.active}.yaml
            groupId: DEFAULT_GROUP
            rule-type: degrade
        authority:
          nacos:
            server-addr: ${infrastructure.nacos.host}:${infrastructure.nacos.port}
            dataId: ${spring.application.name}-authority-rules-${spring.profiles.active}.yaml
            groupId: DEFAULT_GROUP
            rule-type: authority
        param-flow:
          nacos:
            server-addr: ${infrastructure.nacos.host}:${infrastructure.nacos.port}
            dataId: ${spring.application.name}-param-flow-rules-${spring.profiles.active}.yaml
            groupId: DEFAULT_GROUP
            rule-type: param-flow


    # Feign
    openfeign:
      okhttp:
        enabled: true
      client:
        config:
          default:
            connect-timeout: 5000
            read-timeout: 5000
            logger-level: full




  servlet:
    # 文件上传
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
      enabled: true



  jackson:
    # 时间格式
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

    # JSON处理时忽略空字段
    default-property-inclusion: non_null


mybatis-plus:

  mapper-locations: classpath*:/Infra/Mapper/src/main/resources/mapper/*Mapper.xml

  global-config:
    banner: false

    db-config:
      # 主键类型 0:数据库ID自增 1.未定义 2.用户输入 3 id_worker 4.uuid 5.id_worker字符串表示
      # 手动实现雪花算法的主键生成策略
      column-format: "`%s`"
      id-type: INPUT
      table-underline: true # 默认数据库表下划线命名

mybatis-plus-join:
  banner: false

# 日志配置
logging:

  level:
    xyz.spc:
      DEBUG
    org.springframework:
      INFO

  pattern:
    dateformat: mm:ss.SSS


# springdoc
springdoc:

  swagger-ui:
    path: doc.html

# 高并发
multi:
  # 线程池
  threadpool:
    core-pool-size: 16
    max-pool-size: 32
    queue-capacity: 512
    keep-alive-seconds: 60


# actuator (检查项目运行情况)
management:

  server:
    port: 11005 # Money No 5
    base-path: /sys # 端点信息接口使用的端口

  # 端点
  endpoint:
    health:
      show-details: always # 健康情况设置为"always"可以显示硬盘使用情况和线程情况

  endpoints:
    web:
      exposure: # 设置端点暴露的哪些内容, 设置"*"代表暴露所有可访问的端点
        include: '*'
